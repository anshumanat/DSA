//recursive approach
class Solution {
  public:
    int solve(vector<int>& arr,int n) {
        // code here
        if(n<=0) return 0;
        if(n==1) return arr[0];
        
        int pick = arr[n-1]+ solve(arr,n-2);
        int notPick = solve(arr,n-1);
        return max(pick,notPick);
    }
    int findMaxSum(vector<int>& arr){
        int n = arr.size();
        return solve(arr,n);
    } 
};

//memoization
class Solution {
  public:
    int solve(vector<int>& arr,int n,vector<int>&dp) {
        // code here
        if(n<=0) return 0;
        if(n==1) return arr[0];
        
        if(dp[n] !=-1) return dp[n];
        
        int pick = arr[n-1]+ solve(arr,n-2,dp);
        int notPick = solve(arr,n-1,dp);
        return dp[n] =  max(pick,notPick);
    }
    int findMaxSum(vector<int>& arr){
        int n = arr.size();
        vector<int>dp(n+1,-1);
        return solve(arr,n,dp);
    } 
};

//tabulation
class Solution {
  public:
     
    int findMaxSum(vector<int>& arr){
        int n = arr.size();
        vector<int>dp(n+1,0);
        dp[0] = 0;
        dp[1] = arr[0];
        for(int i=2;i<=n;i++){
            dp[i] = max(arr[i-1]+dp[i-2],dp[i-1]);
        }
        return dp[n];
    } 
};
