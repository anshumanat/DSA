//first approach:
class Solution {
  public:
    vector<int> find(vector<int>& arr, int x) {
        // code here
        int n = arr.size();
        int first = -1, last = -1;
        
        for(int i=0;i<n;i++){
            if(arr[i] !=x){
                continue;
            }
            if(first==-1){
                first = i;
            }
            last = i;
        }
        vector<int>res = {first,last};
        return res;
    }
};

//2nd approach -: binary search
class Solution {
  public:
    int findLast(vector<int>arr,int x){
         int n = arr.size();
        int s = 0;
        int e = n-1;
        int last = -1;
 
        vector<int>ans;
        
        while(s<=e){
            int m = s+(e-s)/2;
            if(x==arr[m]){
                last = m;
                s = m+1;
            }else if(x<arr[m]){
                e = m-1;
            }else{
                s = m+1;
            }
        }
        return last;
    }
    int findFirst(vector<int>arr,int x){
        int n = arr.size();
        int s = 0;
        int e = n-1;
        int first = -1;
        
        while(s<=e){
            int m = s+(e-s)/2;
            if(x==arr[m]){
               first = m;
               e = m-1;
            }else if(x<arr[m]){
                e = m-1;
            }else{
                s = m+1;
            }
        }
        return first;
    }
    vector<int> find(vector<int>& arr, int x) {
        // code here
        int n = arr.size();
        
        int first =  findFirst(arr,x);
        int last =  findLast(arr,x);
        
        vector<int>res = {first,last};
        return res;
    }
};

//3rd approach -inbuilt function
class Solution {
  public:
    vector<int> find(vector<int>& arr, int x) {
        // code here
        int n = arr.size();
        
        //return index of first no. >=x
        int first = lower_bound(arr.begin(),arr.end(),x)-arr.begin();
        //return index of first no. >x
        int last = upper_bound(arr.begin(),arr.end(),x)-arr.begin()-1;
        
        //if x is not presnt
        if(first==n || arr[first] !=x){
            first = -1;
            last = -1;
        }
        
        vector<int>res = {first,last};
        return res;
        
    }
};

